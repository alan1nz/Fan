// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2016 22:36:18"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block2_vlg_sample_tst(
	clk,
	reset,
	rx,
	sampler_tx
);
input  clk;
input  reset;
input  rx;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or rx)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block2_vlg_check_tst (
	digit,
	enable,
	pin_name1,
	ssd,
	sampler_rx
);
input  digit;
input [3:0] enable;
input  pin_name1;
input [6:0] ssd;
input sampler_rx;

reg  digit_expected;
reg [3:0] enable_expected;
reg  pin_name1_expected;
reg [6:0] ssd_expected;

reg  digit_prev;
reg [3:0] enable_prev;
reg  pin_name1_prev;
reg [6:0] ssd_prev;

reg  digit_expected_prev;
reg [3:0] enable_expected_prev;
reg  pin_name1_expected_prev;
reg [6:0] ssd_expected_prev;

reg  last_digit_exp;
reg [3:0] last_enable_exp;
reg  last_pin_name1_exp;
reg [6:0] last_ssd_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	digit_prev = digit;
	enable_prev = enable;
	pin_name1_prev = pin_name1;
	ssd_prev = ssd;
end

// update expected /o prevs

always @(trigger)
begin
	digit_expected_prev = digit_expected;
	enable_expected_prev = enable_expected;
	pin_name1_expected_prev = pin_name1_expected;
	ssd_expected_prev = ssd_expected;
end



// expected digit
initial
begin
	digit_expected = 1'bX;
end 
// expected ssd[ 6 ]
initial
begin
	ssd_expected[6] = 1'bX;
end 
// expected ssd[ 5 ]
initial
begin
	ssd_expected[5] = 1'bX;
end 
// expected ssd[ 4 ]
initial
begin
	ssd_expected[4] = 1'bX;
end 
// expected ssd[ 3 ]
initial
begin
	ssd_expected[3] = 1'bX;
end 
// expected ssd[ 2 ]
initial
begin
	ssd_expected[2] = 1'bX;
end 
// expected ssd[ 1 ]
initial
begin
	ssd_expected[1] = 1'bX;
end 
// expected ssd[ 0 ]
initial
begin
	ssd_expected[0] = 1'bX;
end 
// expected enable[ 3 ]
initial
begin
	enable_expected[3] = 1'bX;
end 
// expected enable[ 2 ]
initial
begin
	enable_expected[2] = 1'bX;
end 
// expected enable[ 1 ]
initial
begin
	enable_expected[1] = 1'bX;
end 
// expected enable[ 0 ]
initial
begin
	enable_expected[0] = 1'bX;
end 

// expected pin_name1
initial
begin
	pin_name1_expected = 1'bX;
end 
// generate trigger
always @(digit_expected or digit or enable_expected or enable or pin_name1_expected or pin_name1 or ssd_expected or ssd)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected digit = %b | expected enable = %b | expected pin_name1 = %b | expected ssd = %b | ",digit_expected_prev,enable_expected_prev,pin_name1_expected_prev,ssd_expected_prev);
	$display("| real digit = %b | real enable = %b | real pin_name1 = %b | real ssd = %b | ",digit_prev,enable_prev,pin_name1_prev,ssd_prev);
`endif
	if (
		( digit_expected_prev !== 1'bx ) && ( digit_prev !== digit_expected_prev )
		&& ((digit_expected_prev !== last_digit_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port digit :: @time = %t",  $realtime);
		$display ("     Expected value = %b", digit_expected_prev);
		$display ("     Real value = %b", digit_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_digit_exp = digit_expected_prev;
	end
	if (
		( enable_expected_prev[0] !== 1'bx ) && ( enable_prev[0] !== enable_expected_prev[0] )
		&& ((enable_expected_prev[0] !== last_enable_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_expected_prev);
		$display ("     Real value = %b", enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enable_exp[0] = enable_expected_prev[0];
	end
	if (
		( enable_expected_prev[1] !== 1'bx ) && ( enable_prev[1] !== enable_expected_prev[1] )
		&& ((enable_expected_prev[1] !== last_enable_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_expected_prev);
		$display ("     Real value = %b", enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enable_exp[1] = enable_expected_prev[1];
	end
	if (
		( enable_expected_prev[2] !== 1'bx ) && ( enable_prev[2] !== enable_expected_prev[2] )
		&& ((enable_expected_prev[2] !== last_enable_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_expected_prev);
		$display ("     Real value = %b", enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enable_exp[2] = enable_expected_prev[2];
	end
	if (
		( enable_expected_prev[3] !== 1'bx ) && ( enable_prev[3] !== enable_expected_prev[3] )
		&& ((enable_expected_prev[3] !== last_enable_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_expected_prev);
		$display ("     Real value = %b", enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_enable_exp[3] = enable_expected_prev[3];
	end
	if (
		( pin_name1_expected_prev !== 1'bx ) && ( pin_name1_prev !== pin_name1_expected_prev )
		&& ((pin_name1_expected_prev !== last_pin_name1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pin_name1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pin_name1_expected_prev);
		$display ("     Real value = %b", pin_name1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_pin_name1_exp = pin_name1_expected_prev;
	end
	if (
		( ssd_expected_prev[0] !== 1'bx ) && ( ssd_prev[0] !== ssd_expected_prev[0] )
		&& ((ssd_expected_prev[0] !== last_ssd_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[0] = ssd_expected_prev[0];
	end
	if (
		( ssd_expected_prev[1] !== 1'bx ) && ( ssd_prev[1] !== ssd_expected_prev[1] )
		&& ((ssd_expected_prev[1] !== last_ssd_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[1] = ssd_expected_prev[1];
	end
	if (
		( ssd_expected_prev[2] !== 1'bx ) && ( ssd_prev[2] !== ssd_expected_prev[2] )
		&& ((ssd_expected_prev[2] !== last_ssd_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[2] = ssd_expected_prev[2];
	end
	if (
		( ssd_expected_prev[3] !== 1'bx ) && ( ssd_prev[3] !== ssd_expected_prev[3] )
		&& ((ssd_expected_prev[3] !== last_ssd_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[3] = ssd_expected_prev[3];
	end
	if (
		( ssd_expected_prev[4] !== 1'bx ) && ( ssd_prev[4] !== ssd_expected_prev[4] )
		&& ((ssd_expected_prev[4] !== last_ssd_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[4] = ssd_expected_prev[4];
	end
	if (
		( ssd_expected_prev[5] !== 1'bx ) && ( ssd_prev[5] !== ssd_expected_prev[5] )
		&& ((ssd_expected_prev[5] !== last_ssd_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[5] = ssd_expected_prev[5];
	end
	if (
		( ssd_expected_prev[6] !== 1'bx ) && ( ssd_prev[6] !== ssd_expected_prev[6] )
		&& ((ssd_expected_prev[6] !== last_ssd_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ssd[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ssd_expected_prev);
		$display ("     Real value = %b", ssd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ssd_exp[6] = ssd_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg rx;
// wires                                               
wire digit;
wire [3:0] enable;
wire pin_name1;
wire [6:0] ssd;

wire sampler;                             

// assign statements (if any)                          
Block2 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.digit(digit),
	.enable(enable),
	.pin_name1(pin_name1),
	.reset(reset),
	.rx(rx),
	.ssd(ssd)
);

// clk
initial
begin
	clk = 1'b1;
	# 2500;
	repeat(399)
	begin
		clk = 1'b0;
		clk = #2500 1'b1;
		# 2500;
	end
	clk = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// rx
initial
begin
	rx = 1'b1;
	rx = #80000 1'b0;
	rx = #80000 1'b1;
	rx = #160000 1'b0;
	rx = #320000 1'b1;
	rx = #240000 1'b0;
	rx = #480000 1'b1;
	rx = #320000 1'b0;
	rx = #80000 1'b1;
	rx = #80000 1'b0;
	rx = #80000 1'b1;
end 

Block2_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.rx(rx),
	.sampler_tx(sampler)
);

Block2_vlg_check_tst tb_out(
	.digit(digit),
	.enable(enable),
	.pin_name1(pin_name1),
	.ssd(ssd),
	.sampler_rx(sampler)
);
endmodule

