
311_Sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c10  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800100  00800100  00000c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a2  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030f  00000000  00000000  00001382  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000424  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  00001ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a9  00000000  00000000  00001e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000699  00000000  00000000  000020bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1d c0       	rjmp	.+58     	; 0x3c <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	6e c0       	rjmp	.+220    	; 0xe2 <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	c2 c0       	rjmp	.+388    	; 0x1a0 <__vector_13>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	c4 c1       	rjmp	.+904    	; 0x3aa <__vector_16>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	64 c2       	rjmp	.+1224   	; 0x4f0 <__vector_19>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>
  2a:	18 c0       	rjmp	.+48     	; 0x5c <__bad_interrupt>
  2c:	82 c1       	rjmp	.+772    	; 0x332 <__vector_22>
  2e:	16 c0       	rjmp	.+44     	; 0x5c <__bad_interrupt>
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__vector_24>
  32:	14 c0       	rjmp	.+40     	; 0x5c <__bad_interrupt>
  34:	13 c0       	rjmp	.+38     	; 0x5c <__bad_interrupt>
  36:	12 c0       	rjmp	.+36     	; 0x5c <__bad_interrupt>
  38:	11 c0       	rjmp	.+34     	; 0x5c <__bad_interrupt>
  3a:	10 c0       	rjmp	.+32     	; 0x5c <__bad_interrupt>

0000003c <__ctors_end>:
  3c:	11 24       	eor	r1, r1
  3e:	1f be       	out	0x3f, r1	; 63
  40:	cf ef       	ldi	r28, 0xFF	; 255
  42:	d2 e0       	ldi	r29, 0x02	; 2
  44:	de bf       	out	0x3e, r29	; 62
  46:	cd bf       	out	0x3d, r28	; 61

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e0       	ldi	r26, 0x00	; 0
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a5 31       	cpi	r26, 0x15	; 21
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	6a d2       	rcall	.+1236   	; 0x52e <main>
  5a:	d8 c5       	rjmp	.+2992   	; 0xc0c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <cal_adc>:
	 ADCSRA |= (1<<ADEN)|(1<<ADPS1)|(1<<ADPS2)|(1<<ADIE);
	 ADCSRA |= (1<<ADATE);
	 //ADMUXA = 0;
	 ADMUXA = 11;
	 ADCSRA |= (1<<ADSC);
	 ADC = 0;
  5e:	cf 93       	push	r28
  60:	df 93       	push	r29
  62:	cd b7       	in	r28, 0x3d	; 61
 }
  64:	de b7       	in	r29, 0x3e	; 62
  66:	28 97       	sbiw	r28, 0x08	; 8
  68:	0f b6       	in	r0, 0x3f	; 63

 int cal_adc(unsigned int adc) {
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
  72:	98 87       	std	Y+8, r25	; 0x08
  74:	8f 83       	std	Y+7, r24	; 0x07
	 //conversion from adc to input signal
	 double stepsize = (double)5/(double)1024;
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	a0 ea       	ldi	r26, 0xA0	; 160
  7c:	bb e3       	ldi	r27, 0x3B	; 59
  7e:	89 83       	std	Y+1, r24	; 0x01
  80:	9a 83       	std	Y+2, r25	; 0x02
  82:	ab 83       	std	Y+3, r26	; 0x03
  84:	bc 83       	std	Y+4, r27	; 0x04
	 int Vin = stepsize * adc * 100;
  86:	8f 81       	ldd	r24, Y+7	; 0x07
  88:	98 85       	ldd	r25, Y+8	; 0x08
  8a:	cc 01       	movw	r24, r24
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	bc 01       	movw	r22, r24
  92:	cd 01       	movw	r24, r26
  94:	73 d4       	rcall	.+2278   	; 0x97c <__floatunsisf>
  96:	dc 01       	movw	r26, r24
  98:	cb 01       	movw	r24, r22
  9a:	29 81       	ldd	r18, Y+1	; 0x01
  9c:	3a 81       	ldd	r19, Y+2	; 0x02
  9e:	4b 81       	ldd	r20, Y+3	; 0x03
  a0:	5c 81       	ldd	r21, Y+4	; 0x04
  a2:	bc 01       	movw	r22, r24
  a4:	cd 01       	movw	r24, r26
  a6:	f8 d4       	rcall	.+2544   	; 0xa98 <__mulsf3>
  a8:	dc 01       	movw	r26, r24
  aa:	cb 01       	movw	r24, r22
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	48 ec       	ldi	r20, 0xC8	; 200
  b2:	52 e4       	ldi	r21, 0x42	; 66
  b4:	bc 01       	movw	r22, r24
  b6:	cd 01       	movw	r24, r26
  b8:	ef d4       	rcall	.+2526   	; 0xa98 <__mulsf3>
  ba:	dc 01       	movw	r26, r24
  bc:	cb 01       	movw	r24, r22
  be:	bc 01       	movw	r22, r24
  c0:	cd 01       	movw	r24, r26
  c2:	2b d4       	rcall	.+2134   	; 0x91a <__fixsfsi>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	9e 83       	std	Y+6, r25	; 0x06
  ca:	8d 83       	std	Y+5, r24	; 0x05

	 return Vin; //return Vin
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	9e 81       	ldd	r25, Y+6	; 0x06
 }
  d0:	28 96       	adiw	r28, 0x08	; 8
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <__vector_2>:
volatile uint16_t current = 0;
volatile uint16_t voltage = 0;
volatile double power = 0;


ISR(PCINT0_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	00 90 5f 00 	lds	r0, 0x005F
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	2f 93       	push	r18
  f0:	3f 93       	push	r19
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	ef 93       	push	r30
  f8:	ff 93       	push	r31
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	if (PINA & (1<<PINA0) ) {
 102:	89 e3       	ldi	r24, 0x39	; 57
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	88 2f       	mov	r24, r24
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	81 70       	andi	r24, 0x01	; 1
 110:	99 27       	eor	r25, r25
 112:	89 2b       	or	r24, r25
 114:	99 f0       	breq	.+38     	; 0x13c <__vector_2+0x5a>
		TOCPMCOE |= (1<<TOCC4OE);
 116:	86 e6       	ldi	r24, 0x66	; 102
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	26 e6       	ldi	r18, 0x66	; 102
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	f9 01       	movw	r30, r18
 120:	20 81       	ld	r18, Z
 122:	20 61       	ori	r18, 0x10	; 16
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC2OE);
 128:	86 e6       	ldi	r24, 0x66	; 102
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	26 e6       	ldi	r18, 0x66	; 102
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	f9 01       	movw	r30, r18
 132:	20 81       	ld	r18, Z
 134:	2b 7f       	andi	r18, 0xFB	; 251
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	12 c0       	rjmp	.+36     	; 0x160 <__vector_2+0x7e>
	}
	else {
		TOCPMCOE |= (1<<TOCC2OE);
 13c:	86 e6       	ldi	r24, 0x66	; 102
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	26 e6       	ldi	r18, 0x66	; 102
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	20 81       	ld	r18, Z
 148:	24 60       	ori	r18, 0x04	; 4
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
		TOCPMCOE &= ~(1<<TOCC4OE);
 14e:	86 e6       	ldi	r24, 0x66	; 102
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	26 e6       	ldi	r18, 0x66	; 102
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	2f 7e       	andi	r18, 0xEF	; 239
 15c:	fc 01       	movw	r30, r24
 15e:	20 83       	st	Z, r18
	}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	00 92 5f 00 	sts	0x005F, r0
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <__vector_24>:

ISR(USART0_TX_vect){
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	00 90 5f 00 	lds	r0, 0x005F
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
	//UCSR0B ^= (1<<RXEN0);
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	0f 90       	pop	r0
 196:	00 92 5f 00 	sts	0x005F, r0
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <__vector_13>:

ISR(ADC_vect){
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	00 90 5f 00 	lds	r0, 0x005F
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <__vector_13+0x2a>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <__vector_13+0x2c>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62

	if(count < 100){
 1d0:	80 91 08 01 	lds	r24, 0x0108
 1d4:	90 91 09 01 	lds	r25, 0x0109
 1d8:	84 36       	cpi	r24, 0x64	; 100
 1da:	91 05       	cpc	r25, r1
 1dc:	0c f0       	brlt	.+2      	; 0x1e0 <__vector_13+0x40>
 1de:	64 c0       	rjmp	.+200    	; 0x2a8 <__vector_13+0x108>

		
		//uart_transmit(' ');

		//Obtain the current reading
		cur_reading = cal_adc(ADC);
 1e0:	86 e2       	ldi	r24, 0x26	; 38
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	fc 01       	movw	r30, r24
 1e6:	80 81       	ld	r24, Z
 1e8:	91 81       	ldd	r25, Z+1	; 0x01
 1ea:	39 df       	rcall	.-398    	; 0x5e <cal_adc>
 1ec:	90 93 0b 01 	sts	0x010B, r25
 1f0:	80 93 0a 01 	sts	0x010A, r24
		uart_transmit(' ');

		uart_transmit(']');*/

		//calculate power
		double temp_power = pre_reading * cur_reading;
 1f4:	80 91 0c 01 	lds	r24, 0x010C
 1f8:	90 91 0d 01 	lds	r25, 0x010D
 1fc:	20 91 0a 01 	lds	r18, 0x010A
 200:	30 91 0b 01 	lds	r19, 0x010B
 204:	b9 01       	movw	r22, r18
 206:	b3 d4       	rcall	.+2406   	; 0xb6e <__mulhi3>
 208:	cc 01       	movw	r24, r24
 20a:	a0 e0       	ldi	r26, 0x00	; 0
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	bc 01       	movw	r22, r24
 210:	cd 01       	movw	r24, r26
 212:	b4 d3       	rcall	.+1896   	; 0x97c <__floatunsisf>
 214:	dc 01       	movw	r26, r24
 216:	cb 01       	movw	r24, r22
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	ab 83       	std	Y+3, r26	; 0x03
 21e:	bc 83       	std	Y+4, r27	; 0x04
		temp_power = temp_power / 10000;
 220:	20 e0       	ldi	r18, 0x00	; 0
 222:	30 e4       	ldi	r19, 0x40	; 64
 224:	4c e1       	ldi	r20, 0x1C	; 28
 226:	56 e4       	ldi	r21, 0x46	; 70
 228:	69 81       	ldd	r22, Y+1	; 0x01
 22a:	7a 81       	ldd	r23, Y+2	; 0x02
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	0c d3       	rcall	.+1560   	; 0x84a <__divsf3>
 232:	dc 01       	movw	r26, r24
 234:	cb 01       	movw	r24, r22
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	9a 83       	std	Y+2, r25	; 0x02
 23a:	ab 83       	std	Y+3, r26	; 0x03
 23c:	bc 83       	std	Y+4, r27	; 0x04
		power = power + temp_power;
 23e:	80 91 0e 01 	lds	r24, 0x010E
 242:	90 91 0f 01 	lds	r25, 0x010F
 246:	a0 91 10 01 	lds	r26, 0x0110
 24a:	b0 91 11 01 	lds	r27, 0x0111
 24e:	29 81       	ldd	r18, Y+1	; 0x01
 250:	3a 81       	ldd	r19, Y+2	; 0x02
 252:	4b 81       	ldd	r20, Y+3	; 0x03
 254:	5c 81       	ldd	r21, Y+4	; 0x04
 256:	bc 01       	movw	r22, r24
 258:	cd 01       	movw	r24, r26
 25a:	93 d2       	rcall	.+1318   	; 0x782 <__addsf3>
 25c:	dc 01       	movw	r26, r24
 25e:	cb 01       	movw	r24, r22
 260:	80 93 0e 01 	sts	0x010E, r24
 264:	90 93 0f 01 	sts	0x010F, r25
 268:	a0 93 10 01 	sts	0x0110, r26
 26c:	b0 93 11 01 	sts	0x0111, r27

		//Increment the number of power values and switch channel
		count++;
 270:	80 91 08 01 	lds	r24, 0x0108
 274:	90 91 09 01 	lds	r25, 0x0109
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	90 93 09 01 	sts	0x0109, r25
 27e:	80 93 08 01 	sts	0x0108, r24
		ADMUXA ^= (1<<0);
 282:	89 e2       	ldi	r24, 0x29	; 41
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	29 e2       	ldi	r18, 0x29	; 41
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	f9 01       	movw	r30, r18
 28c:	30 81       	ld	r19, Z
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	23 27       	eor	r18, r19
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18

		//Update previous reading to the current reading
		pre_reading = cur_reading ;
 296:	80 91 0a 01 	lds	r24, 0x010A
 29a:	90 91 0b 01 	lds	r25, 0x010B
 29e:	90 93 0d 01 	sts	0x010D, r25
 2a2:	80 93 0c 01 	sts	0x010C, r24
 2a6:	2d c0       	rjmp	.+90     	; 0x302 <__stack+0x3>

	}else{
		
		//take the average value
		power = power/99;
 2a8:	80 91 0e 01 	lds	r24, 0x010E
 2ac:	90 91 0f 01 	lds	r25, 0x010F
 2b0:	a0 91 10 01 	lds	r26, 0x0110
 2b4:	b0 91 11 01 	lds	r27, 0x0111
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	46 ec       	ldi	r20, 0xC6	; 198
 2be:	52 e4       	ldi	r21, 0x42	; 66
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	c2 d2       	rcall	.+1412   	; 0x84a <__divsf3>
 2c6:	dc 01       	movw	r26, r24
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 93 0e 01 	sts	0x010E, r24
 2ce:	90 93 0f 01 	sts	0x010F, r25
 2d2:	a0 93 10 01 	sts	0x0110, r26
 2d6:	b0 93 11 01 	sts	0x0111, r27
		uart_transmit('|');

		uart_transmit(' ');*/

		//Reinitialize everything to start another power reading
		pre_reading = 0;
 2da:	10 92 0d 01 	sts	0x010D, r1
 2de:	10 92 0c 01 	sts	0x010C, r1
		cur_reading  = 0;
 2e2:	10 92 0b 01 	sts	0x010B, r1
 2e6:	10 92 0a 01 	sts	0x010A, r1
		count = 0;
 2ea:	10 92 09 01 	sts	0x0109, r1
 2ee:	10 92 08 01 	sts	0x0108, r1
		power = 0;
 2f2:	10 92 0e 01 	sts	0x010E, r1
 2f6:	10 92 0f 01 	sts	0x010F, r1
 2fa:	10 92 10 01 	sts	0x0110, r1
 2fe:	10 92 11 01 	sts	0x0111, r1
	}
}	
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	00 92 5f 00 	sts	0x005F, r0
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <__vector_22>:


	
ISR(USART0_RX_vect){
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	00 90 5f 00 	lds	r0, 0x005F
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	data = UDR0;
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	80 93 12 01 	sts	0x0112, r24

	UCSR0B &= ~(1<<RXEN0);
 36a:	85 e8       	ldi	r24, 0x85	; 133
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	25 e8       	ldi	r18, 0x85	; 133
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	f9 01       	movw	r30, r18
 374:	20 81       	ld	r18, Z
 376:	2f 7e       	andi	r18, 0xEF	; 239
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
	//UCSR0B |=(1<<TXEN0);
	
	uart_transmit(data);
 37c:	80 91 12 01 	lds	r24, 0x0112
 380:	e5 d1       	rcall	.+970    	; 0x74c <uart_transmit>
	//UCSR0B |= (1<<RXEN0);
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	00 92 5f 00 	sts	0x005F, r0
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <__vector_16>:

ISR(TIMER2_CAPT_vect){
 3aa:	1f 92       	push	r1
 3ac:	0f 92       	push	r0
 3ae:	00 90 5f 00 	lds	r0, 0x005F
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	3f 93       	push	r19
 3ba:	4f 93       	push	r20
 3bc:	5f 93       	push	r21
 3be:	6f 93       	push	r22
 3c0:	7f 93       	push	r23
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
 3c6:	af 93       	push	r26
 3c8:	bf 93       	push	r27
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	26 97       	sbiw	r28, 0x06	; 6
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	cd bf       	out	0x3d, r28	; 61

	//if rising edge triggered, update rising_edge value
	if(PINB & (1<<PB2)){
 3dc:	86 e3       	ldi	r24, 0x36	; 54
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	88 2f       	mov	r24, r24
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	84 70       	andi	r24, 0x04	; 4
 3ea:	99 27       	eor	r25, r25
 3ec:	89 2b       	or	r24, r25
 3ee:	e1 f0       	breq	.+56     	; 0x428 <__vector_16+0x7e>
		n_over_flow = 0;
 3f0:	10 92 07 01 	sts	0x0107, r1
 3f4:	10 92 06 01 	sts	0x0106, r1
		rising_edge = ICR2;
 3f8:	80 ec       	ldi	r24, 0xC0	; 192
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	fc 01       	movw	r30, r24
 3fe:	80 81       	ld	r24, Z
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	90 93 03 01 	sts	0x0103, r25
 406:	80 93 02 01 	sts	0x0102, r24
		falling_edge = 0;
 40a:	10 92 05 01 	sts	0x0105, r1
 40e:	10 92 04 01 	sts	0x0104, r1

		//Change to falling edge triggered to capture 1/4 of rotation
		TCCR2B ^= (1<<ICES2);
 412:	89 ec       	ldi	r24, 0xC9	; 201
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	29 ec       	ldi	r18, 0xC9	; 201
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	f9 01       	movw	r30, r18
 41c:	30 81       	ld	r19, Z
 41e:	20 e4       	ldi	r18, 0x40	; 64
 420:	23 27       	eor	r18, r19
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
 426:	4a c0       	rjmp	.+148    	; 0x4bc <__vector_16+0x112>
	}else{

		falling_edge = ICR2;
 428:	80 ec       	ldi	r24, 0xC0	; 192
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	fc 01       	movw	r30, r24
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	90 93 05 01 	sts	0x0105, r25
 436:	80 93 04 01 	sts	0x0104, r24
		
		//Calculate the timer value between rising edge and falling edge,
		//hence calculate RPM
		int distance = n_over_flow*65536 - rising_edge + falling_edge;
 43a:	80 91 06 01 	lds	r24, 0x0106
 43e:	90 91 07 01 	lds	r25, 0x0107
 442:	20 91 04 01 	lds	r18, 0x0104
 446:	30 91 05 01 	lds	r19, 0x0105
 44a:	80 91 02 01 	lds	r24, 0x0102
 44e:	90 91 03 01 	lds	r25, 0x0103
 452:	a9 01       	movw	r20, r18
 454:	48 1b       	sub	r20, r24
 456:	59 0b       	sbc	r21, r25
 458:	ca 01       	movw	r24, r20
 45a:	9a 83       	std	Y+2, r25	; 0x02
 45c:	89 83       	std	Y+1, r24	; 0x01
		cur_speed = 1875000/distance;
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	9c 01       	movw	r18, r24
 464:	99 0f       	add	r25, r25
 466:	44 0b       	sbc	r20, r20
 468:	55 0b       	sbc	r21, r21
 46a:	88 e3       	ldi	r24, 0x38	; 56
 46c:	9c e9       	ldi	r25, 0x9C	; 156
 46e:	ac e1       	ldi	r26, 0x1C	; 28
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	bc 01       	movw	r22, r24
 474:	cd 01       	movw	r24, r26
 476:	8c d3       	rcall	.+1816   	; 0xb90 <__divmodsi4>
 478:	da 01       	movw	r26, r20
 47a:	c9 01       	movw	r24, r18
 47c:	90 93 01 01 	sts	0x0101, r25
 480:	80 93 00 01 	sts	0x0100, r24
		
		
		error = 2700 - cur_speed;
 484:	80 91 00 01 	lds	r24, 0x0100
 488:	90 91 01 01 	lds	r25, 0x0101
 48c:	2c e8       	ldi	r18, 0x8C	; 140
 48e:	3a e0       	ldi	r19, 0x0A	; 10
 490:	f9 01       	movw	r30, r18
 492:	e8 1b       	sub	r30, r24
 494:	f9 0b       	sbc	r31, r25
 496:	cf 01       	movw	r24, r30
 498:	90 93 14 01 	sts	0x0114, r25
 49c:	80 93 13 01 	sts	0x0113, r24
		uart_transmit(y[2]);
		uart_transmit(y[3]);
		uart_transmit(y[4]);
		uart_transmit(' ');*/
		
		rising_edge = 0;
 4a0:	10 92 03 01 	sts	0x0103, r1
 4a4:	10 92 02 01 	sts	0x0102, r1
		
		//Toggle bit to change back to rising edge triggered
		TCCR2B ^= (1<<ICES2);
 4a8:	89 ec       	ldi	r24, 0xC9	; 201
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	29 ec       	ldi	r18, 0xC9	; 201
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	f9 01       	movw	r30, r18
 4b2:	30 81       	ld	r19, Z
 4b4:	20 e4       	ldi	r18, 0x40	; 64
 4b6:	23 27       	eor	r18, r19
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
	}
}
 4bc:	26 96       	adiw	r28, 0x06	; 6
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	00 92 5f 00 	sts	0x005F, r0
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <__vector_19>:


ISR(TIMER2_OVF_vect){
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	00 90 5f 00 	lds	r0, 0x005F
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
	n_over_flow ++;
 508:	80 91 06 01 	lds	r24, 0x0106
 50c:	90 91 07 01 	lds	r25, 0x0107
 510:	01 96       	adiw	r24, 0x01	; 1
 512:	90 93 07 01 	sts	0x0107, r25
 516:	80 93 06 01 	sts	0x0106, r24
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	9f 91       	pop	r25
 520:	8f 91       	pop	r24
 522:	0f 90       	pop	r0
 524:	00 92 5f 00 	sts	0x005F, r0
 528:	0f 90       	pop	r0
 52a:	1f 90       	pop	r1
 52c:	18 95       	reti

0000052e <main>:


int main(void)
{
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	00 d0       	rcall	.+0      	; 0x534 <main+0x6>
 534:	00 d0       	rcall	.+0      	; 0x536 <main+0x8>
 536:	00 d0       	rcall	.+0      	; 0x538 <main+0xa>
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
	// Initialize pin
	// Output: PA5, PA3 for fan drivers
	// Input: PA0, PB0, PB1 
	//PA0 corresponds to hall sensor input
	DDRA |= (1<<DDRA5)|(1<<DDRA3);
 53c:	8a e3       	ldi	r24, 0x3A	; 58
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	2a e3       	ldi	r18, 0x3A	; 58
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	f9 01       	movw	r30, r18
 546:	20 81       	ld	r18, Z
 548:	28 62       	ori	r18, 0x28	; 40
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18
	DDRA &= ~(1<<DDRA0);
 54e:	8a e3       	ldi	r24, 0x3A	; 58
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	2a e3       	ldi	r18, 0x3A	; 58
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	f9 01       	movw	r30, r18
 558:	20 81       	ld	r18, Z
 55a:	2e 7f       	andi	r18, 0xFE	; 254
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
	DDRB &= ~((1<<DDRB0)|(DDRB1)|(DDRB2));
 560:	87 e3       	ldi	r24, 0x37	; 55
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	27 e3       	ldi	r18, 0x37	; 55
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	f9 01       	movw	r30, r18
 56a:	20 81       	ld	r18, Z
 56c:	2c 7f       	andi	r18, 0xFC	; 252
 56e:	fc 01       	movw	r30, r24
 570:	20 83       	st	Z, r18

	//enable the internal pull-up resistor for the hall sensor input
	PUEA = 0b00000001;
 572:	83 e6       	ldi	r24, 0x63	; 99
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18

	cli();
 57c:	f8 94       	cli

	//enable interrupt on PIN7 for hall sensor input
	PCMSK0 |= (1 << PCINT0);
 57e:	82 e3       	ldi	r24, 0x32	; 50
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	22 e3       	ldi	r18, 0x32	; 50
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	f9 01       	movw	r30, r18
 588:	20 81       	ld	r18, Z
 58a:	21 60       	ori	r18, 0x01	; 1
 58c:	fc 01       	movw	r30, r24
 58e:	20 83       	st	Z, r18
	GIMSK |= (1 << PCIE0);
 590:	8b e5       	ldi	r24, 0x5B	; 91
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	2b e5       	ldi	r18, 0x5B	; 91
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	f9 01       	movw	r30, r18
 59a:	20 81       	ld	r18, Z
 59c:	20 61       	ori	r18, 0x10	; 16
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
	

	//Initialize timer, UART and ADC
	timer_init();
 5a2:	5c d0       	rcall	.+184    	; 0x65c <timer_init>
	uart_init();
 5a4:	bc d0       	rcall	.+376    	; 0x71e <uart_init>
	//adc_init();
	UCSR0B &= ~(1<<RXEN0);
 5a6:	85 e8       	ldi	r24, 0x85	; 133
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	25 e8       	ldi	r18, 0x85	; 133
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	f9 01       	movw	r30, r18
 5b0:	20 81       	ld	r18, Z
 5b2:	2f 7e       	andi	r18, 0xEF	; 239
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18


	//enable global interrupt
	sei();
 5b8:	78 94       	sei
	
	int error;
	char temp[4];

	while (1){
		error = 2650 - cur_speed;
 5ba:	80 91 00 01 	lds	r24, 0x0100
 5be:	90 91 01 01 	lds	r25, 0x0101
 5c2:	2a e5       	ldi	r18, 0x5A	; 90
 5c4:	3a e0       	ldi	r19, 0x0A	; 10
 5c6:	a9 01       	movw	r20, r18
 5c8:	48 1b       	sub	r20, r24
 5ca:	59 0b       	sbc	r21, r25
 5cc:	ca 01       	movw	r24, r20
 5ce:	9a 83       	std	Y+2, r25	; 0x02
 5d0:	89 83       	std	Y+1, r24	; 0x01
		pid(error);
 5d2:	89 81       	ldd	r24, Y+1	; 0x01
 5d4:	9a 81       	ldd	r25, Y+2	; 0x02
 5d6:	01 d0       	rcall	.+2      	; 0x5da <pid>
	}
 5d8:	f0 cf       	rjmp	.-32     	; 0x5ba <main+0x8c>

000005da <pid>:

#include "PID.h"

#define duty_cycle OCR1B/(OCR1A+1)

void pid(int error){
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
 5de:	00 d0       	rcall	.+0      	; 0x5e0 <pid+0x6>
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <pid+0x8>
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <pid+0xa>
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	9e 83       	std	Y+6, r25	; 0x06
 5ea:	8d 83       	std	Y+5, r24	; 0x05
	
	int p_term = error * p_coefficient;
 5ec:	8d 81       	ldd	r24, Y+5	; 0x05
 5ee:	9e 81       	ldd	r25, Y+6	; 0x06
 5f0:	09 2e       	mov	r0, r25
 5f2:	00 0c       	add	r0, r0
 5f4:	aa 0b       	sbc	r26, r26
 5f6:	bb 0b       	sbc	r27, r27
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	c1 d1       	rcall	.+898    	; 0x980 <__floatsisf>
 5fe:	dc 01       	movw	r26, r24
 600:	cb 01       	movw	r24, r22
 602:	20 e0       	ldi	r18, 0x00	; 0
 604:	30 e0       	ldi	r19, 0x00	; 0
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	5f e3       	ldi	r21, 0x3F	; 63
 60a:	bc 01       	movw	r22, r24
 60c:	cd 01       	movw	r24, r26
 60e:	44 d2       	rcall	.+1160   	; 0xa98 <__mulsf3>
 610:	dc 01       	movw	r26, r24
 612:	cb 01       	movw	r24, r22
 614:	bc 01       	movw	r22, r24
 616:	cd 01       	movw	r24, r26
 618:	80 d1       	rcall	.+768    	; 0x91a <__fixsfsi>
 61a:	dc 01       	movw	r26, r24
 61c:	cb 01       	movw	r24, r22
 61e:	9c 83       	std	Y+4, r25	; 0x04
 620:	8b 83       	std	Y+3, r24	; 0x03
	
	int pid_output = p_term ;
 622:	8b 81       	ldd	r24, Y+3	; 0x03
 624:	9c 81       	ldd	r25, Y+4	; 0x04
 626:	9a 83       	std	Y+2, r25	; 0x02
 628:	89 83       	std	Y+1, r24	; 0x01
	
	if(pid_output>267){
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	8c 30       	cpi	r24, 0x0C	; 12
 630:	91 40       	sbci	r25, 0x01	; 1
 632:	24 f0       	brlt	.+8      	; 0x63c <pid+0x62>
		pid_output = 267;
 634:	8b e0       	ldi	r24, 0x0B	; 11
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	9a 83       	std	Y+2, r25	; 0x02
 63a:	89 83       	std	Y+1, r24	; 0x01
	}


	
	OCR1B = pid_output ;
 63c:	88 e4       	ldi	r24, 0x48	; 72
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	29 81       	ldd	r18, Y+1	; 0x01
 642:	3a 81       	ldd	r19, Y+2	; 0x02
 644:	fc 01       	movw	r30, r24
 646:	31 83       	std	Z+1, r19	; 0x01
 648:	20 83       	st	Z, r18

	
}
 64a:	26 96       	adiw	r28, 0x06	; 6
 64c:	0f b6       	in	r0, 0x3f	; 63
 64e:	f8 94       	cli
 650:	de bf       	out	0x3e, r29	; 62
 652:	0f be       	out	0x3f, r0	; 63
 654:	cd bf       	out	0x3d, r28	; 61
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <timer_init>:

#include "timer.h"

void timer_init(){
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	
	//Setting fast PWM mode OCR1B to operate in non-inverting mode.
	TCCR1B |= (1<<CS10)|(1 << WGM12)|(1<<WGM13)|(1<<ICES1);
 664:	8e e4       	ldi	r24, 0x4E	; 78
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	2e e4       	ldi	r18, 0x4E	; 78
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	f9 01       	movw	r30, r18
 66e:	20 81       	ld	r18, Z
 670:	29 65       	ori	r18, 0x59	; 89
 672:	fc 01       	movw	r30, r24
 674:	20 83       	st	Z, r18
	TCCR1A |= (1<< WGM11)|(1<<WGM10)|(1<<COM1B1);
 676:	8f e4       	ldi	r24, 0x4F	; 79
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	2f e4       	ldi	r18, 0x4F	; 79
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	f9 01       	movw	r30, r18
 680:	20 81       	ld	r18, Z
 682:	23 62       	ori	r18, 0x23	; 35
 684:	fc 01       	movw	r30, r24
 686:	20 83       	st	Z, r18
	
	//route PWM to switches
	TOCPMSA1 |= (1<<TOCC4S0);
 688:	88 e6       	ldi	r24, 0x68	; 104
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	28 e6       	ldi	r18, 0x68	; 104
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	f9 01       	movw	r30, r18
 692:	20 81       	ld	r18, Z
 694:	21 60       	ori	r18, 0x01	; 1
 696:	fc 01       	movw	r30, r24
 698:	20 83       	st	Z, r18
	TOCPMSA0 |= (1<<TOCC2S0);
 69a:	87 e6       	ldi	r24, 0x67	; 103
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	27 e6       	ldi	r18, 0x67	; 103
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	f9 01       	movw	r30, r18
 6a4:	20 81       	ld	r18, Z
 6a6:	20 61       	ori	r18, 0x10	; 16
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 83       	st	Z, r18

	TOCPMCOE |= (1<<TOCC4OE);
 6ac:	86 e6       	ldi	r24, 0x66	; 102
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	26 e6       	ldi	r18, 0x66	; 102
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	f9 01       	movw	r30, r18
 6b6:	20 81       	ld	r18, Z
 6b8:	20 61       	ori	r18, 0x10	; 16
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 83       	st	Z, r18

	//Initilise timer 2 for input capture
	TIMSK2 |= (1<<ICIE2)|(1<<TOIE2);
 6be:	81 e3       	ldi	r24, 0x31	; 49
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	21 e3       	ldi	r18, 0x31	; 49
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	f9 01       	movw	r30, r18
 6c8:	20 81       	ld	r18, Z
 6ca:	21 62       	ori	r18, 0x21	; 33
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
	TCCR2B |= (1<<CS21)|(1<<ICES2)|(1<<CS20);
 6d0:	89 ec       	ldi	r24, 0xC9	; 201
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	29 ec       	ldi	r18, 0xC9	; 201
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	f9 01       	movw	r30, r18
 6da:	20 81       	ld	r18, Z
 6dc:	23 64       	ori	r18, 0x43	; 67
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
	TCCR2A |= (1<<COM2B1);
 6e2:	8a ec       	ldi	r24, 0xCA	; 202
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	2a ec       	ldi	r18, 0xCA	; 202
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	f9 01       	movw	r30, r18
 6ec:	20 81       	ld	r18, Z
 6ee:	20 62       	ori	r18, 0x20	; 32
 6f0:	fc 01       	movw	r30, r24
 6f2:	20 83       	st	Z, r18
	
	
	TCNT0 = 0;
 6f4:	82 e5       	ldi	r24, 0x52	; 82
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	fc 01       	movw	r30, r24
 6fa:	10 82       	st	Z, r1

	//Setting 30k Hz PWM
	OCR1A = 266;
 6fc:	8a e4       	ldi	r24, 0x4A	; 74
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	2a e0       	ldi	r18, 0x0A	; 10
 702:	31 e0       	ldi	r19, 0x01	; 1
 704:	fc 01       	movw	r30, r24
 706:	31 83       	std	Z+1, r19	; 0x01
 708:	20 83       	st	Z, r18

	//Setting duty cycle
	OCR1B = 267;
 70a:	88 e4       	ldi	r24, 0x48	; 72
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	2b e0       	ldi	r18, 0x0B	; 11
 710:	31 e0       	ldi	r19, 0x01	; 1
 712:	fc 01       	movw	r30, r24
 714:	31 83       	std	Z+1, r19	; 0x01
 716:	20 83       	st	Z, r18
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <uart_init>:
 */ 

 #include "uart.h"


 void uart_init(){
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
	UBRR0	= UBRR; //Setting baud rate to 9600
 726:	81 e8       	ldi	r24, 0x81	; 129
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	23 e3       	ldi	r18, 0x33	; 51
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	fc 01       	movw	r30, r24
 730:	31 83       	std	Z+1, r19	; 0x01
 732:	20 83       	st	Z, r18
	//Enable transmitter and receiver
	UCSR0B |= (1<<TXEN0)|(1<<RXCIE0)|(1<<TXCIE0);
 734:	85 e8       	ldi	r24, 0x85	; 133
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	25 e8       	ldi	r18, 0x85	; 133
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	f9 01       	movw	r30, r18
 73e:	20 81       	ld	r18, Z
 740:	28 6c       	ori	r18, 0xC8	; 200
 742:	fc 01       	movw	r30, r24
 744:	20 83       	st	Z, r18
 }
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	08 95       	ret

0000074c <uart_transmit>:



 void uart_transmit(unsigned char data){
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	1f 92       	push	r1
 752:	cd b7       	in	r28, 0x3d	; 61
 754:	de b7       	in	r29, 0x3e	; 62
 756:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSR0A&(1<<UDRE0)));
 758:	00 00       	nop
 75a:	86 e8       	ldi	r24, 0x86	; 134
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	fc 01       	movw	r30, r24
 760:	80 81       	ld	r24, Z
 762:	88 2f       	mov	r24, r24
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	80 72       	andi	r24, 0x20	; 32
 768:	99 27       	eor	r25, r25
 76a:	89 2b       	or	r24, r25
 76c:	b1 f3       	breq	.-20     	; 0x75a <uart_transmit+0xe>
	UDR0 = data;
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	29 81       	ldd	r18, Y+1	; 0x01
 774:	fc 01       	movw	r30, r24
 776:	20 83       	st	Z, r18
 }
 778:	0f 90       	pop	r0
 77a:	df 91       	pop	r29
 77c:	cf 91       	pop	r28
 77e:	08 95       	ret

00000780 <__subsf3>:
 780:	50 58       	subi	r21, 0x80	; 128

00000782 <__addsf3>:
 782:	bb 27       	eor	r27, r27
 784:	aa 27       	eor	r26, r26
 786:	0e d0       	rcall	.+28     	; 0x7a4 <__addsf3x>
 788:	4d c1       	rjmp	.+666    	; 0xa24 <__fp_round>
 78a:	3e d1       	rcall	.+636    	; 0xa08 <__fp_pscA>
 78c:	30 f0       	brcs	.+12     	; 0x79a <__addsf3+0x18>
 78e:	43 d1       	rcall	.+646    	; 0xa16 <__fp_pscB>
 790:	20 f0       	brcs	.+8      	; 0x79a <__addsf3+0x18>
 792:	31 f4       	brne	.+12     	; 0x7a0 <__addsf3+0x1e>
 794:	9f 3f       	cpi	r25, 0xFF	; 255
 796:	11 f4       	brne	.+4      	; 0x79c <__addsf3+0x1a>
 798:	1e f4       	brtc	.+6      	; 0x7a0 <__addsf3+0x1e>
 79a:	33 c1       	rjmp	.+614    	; 0xa02 <__fp_nan>
 79c:	0e f4       	brtc	.+2      	; 0x7a0 <__addsf3+0x1e>
 79e:	e0 95       	com	r30
 7a0:	e7 fb       	bst	r30, 7
 7a2:	29 c1       	rjmp	.+594    	; 0x9f6 <__fp_inf>

000007a4 <__addsf3x>:
 7a4:	e9 2f       	mov	r30, r25
 7a6:	4f d1       	rcall	.+670    	; 0xa46 <__fp_split3>
 7a8:	80 f3       	brcs	.-32     	; 0x78a <__addsf3+0x8>
 7aa:	ba 17       	cp	r27, r26
 7ac:	62 07       	cpc	r22, r18
 7ae:	73 07       	cpc	r23, r19
 7b0:	84 07       	cpc	r24, r20
 7b2:	95 07       	cpc	r25, r21
 7b4:	18 f0       	brcs	.+6      	; 0x7bc <__addsf3x+0x18>
 7b6:	71 f4       	brne	.+28     	; 0x7d4 <__addsf3x+0x30>
 7b8:	9e f5       	brtc	.+102    	; 0x820 <__addsf3x+0x7c>
 7ba:	67 c1       	rjmp	.+718    	; 0xa8a <__fp_zero>
 7bc:	0e f4       	brtc	.+2      	; 0x7c0 <__addsf3x+0x1c>
 7be:	e0 95       	com	r30
 7c0:	0b 2e       	mov	r0, r27
 7c2:	ba 2f       	mov	r27, r26
 7c4:	a0 2d       	mov	r26, r0
 7c6:	0b 01       	movw	r0, r22
 7c8:	b9 01       	movw	r22, r18
 7ca:	90 01       	movw	r18, r0
 7cc:	0c 01       	movw	r0, r24
 7ce:	ca 01       	movw	r24, r20
 7d0:	a0 01       	movw	r20, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	ff 27       	eor	r31, r31
 7d6:	59 1b       	sub	r21, r25
 7d8:	99 f0       	breq	.+38     	; 0x800 <__addsf3x+0x5c>
 7da:	59 3f       	cpi	r21, 0xF9	; 249
 7dc:	50 f4       	brcc	.+20     	; 0x7f2 <__addsf3x+0x4e>
 7de:	50 3e       	cpi	r21, 0xE0	; 224
 7e0:	68 f1       	brcs	.+90     	; 0x83c <__addsf3x+0x98>
 7e2:	1a 16       	cp	r1, r26
 7e4:	f0 40       	sbci	r31, 0x00	; 0
 7e6:	a2 2f       	mov	r26, r18
 7e8:	23 2f       	mov	r18, r19
 7ea:	34 2f       	mov	r19, r20
 7ec:	44 27       	eor	r20, r20
 7ee:	58 5f       	subi	r21, 0xF8	; 248
 7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <__addsf3x+0x34>
 7f2:	46 95       	lsr	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	a7 95       	ror	r26
 7fa:	f0 40       	sbci	r31, 0x00	; 0
 7fc:	53 95       	inc	r21
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__addsf3x+0x4e>
 800:	7e f4       	brtc	.+30     	; 0x820 <__addsf3x+0x7c>
 802:	1f 16       	cp	r1, r31
 804:	ba 0b       	sbc	r27, r26
 806:	62 0b       	sbc	r22, r18
 808:	73 0b       	sbc	r23, r19
 80a:	84 0b       	sbc	r24, r20
 80c:	ba f0       	brmi	.+46     	; 0x83c <__addsf3x+0x98>
 80e:	91 50       	subi	r25, 0x01	; 1
 810:	a1 f0       	breq	.+40     	; 0x83a <__addsf3x+0x96>
 812:	ff 0f       	add	r31, r31
 814:	bb 1f       	adc	r27, r27
 816:	66 1f       	adc	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	c2 f7       	brpl	.-16     	; 0x80e <__addsf3x+0x6a>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <__addsf3x+0x98>
 820:	ba 0f       	add	r27, r26
 822:	62 1f       	adc	r22, r18
 824:	73 1f       	adc	r23, r19
 826:	84 1f       	adc	r24, r20
 828:	48 f4       	brcc	.+18     	; 0x83c <__addsf3x+0x98>
 82a:	87 95       	ror	r24
 82c:	77 95       	ror	r23
 82e:	67 95       	ror	r22
 830:	b7 95       	ror	r27
 832:	f7 95       	ror	r31
 834:	9e 3f       	cpi	r25, 0xFE	; 254
 836:	08 f0       	brcs	.+2      	; 0x83a <__addsf3x+0x96>
 838:	b3 cf       	rjmp	.-154    	; 0x7a0 <__addsf3+0x1e>
 83a:	93 95       	inc	r25
 83c:	88 0f       	add	r24, r24
 83e:	08 f0       	brcs	.+2      	; 0x842 <__addsf3x+0x9e>
 840:	99 27       	eor	r25, r25
 842:	ee 0f       	add	r30, r30
 844:	97 95       	ror	r25
 846:	87 95       	ror	r24
 848:	08 95       	ret

0000084a <__divsf3>:
 84a:	0c d0       	rcall	.+24     	; 0x864 <__divsf3x>
 84c:	eb c0       	rjmp	.+470    	; 0xa24 <__fp_round>
 84e:	e3 d0       	rcall	.+454    	; 0xa16 <__fp_pscB>
 850:	40 f0       	brcs	.+16     	; 0x862 <__divsf3+0x18>
 852:	da d0       	rcall	.+436    	; 0xa08 <__fp_pscA>
 854:	30 f0       	brcs	.+12     	; 0x862 <__divsf3+0x18>
 856:	21 f4       	brne	.+8      	; 0x860 <__divsf3+0x16>
 858:	5f 3f       	cpi	r21, 0xFF	; 255
 85a:	19 f0       	breq	.+6      	; 0x862 <__divsf3+0x18>
 85c:	cc c0       	rjmp	.+408    	; 0x9f6 <__fp_inf>
 85e:	51 11       	cpse	r21, r1
 860:	15 c1       	rjmp	.+554    	; 0xa8c <__fp_szero>
 862:	cf c0       	rjmp	.+414    	; 0xa02 <__fp_nan>

00000864 <__divsf3x>:
 864:	f0 d0       	rcall	.+480    	; 0xa46 <__fp_split3>
 866:	98 f3       	brcs	.-26     	; 0x84e <__divsf3+0x4>

00000868 <__divsf3_pse>:
 868:	99 23       	and	r25, r25
 86a:	c9 f3       	breq	.-14     	; 0x85e <__divsf3+0x14>
 86c:	55 23       	and	r21, r21
 86e:	b1 f3       	breq	.-20     	; 0x85c <__divsf3+0x12>
 870:	95 1b       	sub	r25, r21
 872:	55 0b       	sbc	r21, r21
 874:	bb 27       	eor	r27, r27
 876:	aa 27       	eor	r26, r26
 878:	62 17       	cp	r22, r18
 87a:	73 07       	cpc	r23, r19
 87c:	84 07       	cpc	r24, r20
 87e:	38 f0       	brcs	.+14     	; 0x88e <__divsf3_pse+0x26>
 880:	9f 5f       	subi	r25, 0xFF	; 255
 882:	5f 4f       	sbci	r21, 0xFF	; 255
 884:	22 0f       	add	r18, r18
 886:	33 1f       	adc	r19, r19
 888:	44 1f       	adc	r20, r20
 88a:	aa 1f       	adc	r26, r26
 88c:	a9 f3       	breq	.-22     	; 0x878 <__divsf3_pse+0x10>
 88e:	33 d0       	rcall	.+102    	; 0x8f6 <__divsf3_pse+0x8e>
 890:	0e 2e       	mov	r0, r30
 892:	3a f0       	brmi	.+14     	; 0x8a2 <__divsf3_pse+0x3a>
 894:	e0 e8       	ldi	r30, 0x80	; 128
 896:	30 d0       	rcall	.+96     	; 0x8f8 <__divsf3_pse+0x90>
 898:	91 50       	subi	r25, 0x01	; 1
 89a:	50 40       	sbci	r21, 0x00	; 0
 89c:	e6 95       	lsr	r30
 89e:	00 1c       	adc	r0, r0
 8a0:	ca f7       	brpl	.-14     	; 0x894 <__divsf3_pse+0x2c>
 8a2:	29 d0       	rcall	.+82     	; 0x8f6 <__divsf3_pse+0x8e>
 8a4:	fe 2f       	mov	r31, r30
 8a6:	27 d0       	rcall	.+78     	; 0x8f6 <__divsf3_pse+0x8e>
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	bb 1f       	adc	r27, r27
 8b0:	26 17       	cp	r18, r22
 8b2:	37 07       	cpc	r19, r23
 8b4:	48 07       	cpc	r20, r24
 8b6:	ab 07       	cpc	r26, r27
 8b8:	b0 e8       	ldi	r27, 0x80	; 128
 8ba:	09 f0       	breq	.+2      	; 0x8be <__divsf3_pse+0x56>
 8bc:	bb 0b       	sbc	r27, r27
 8be:	80 2d       	mov	r24, r0
 8c0:	bf 01       	movw	r22, r30
 8c2:	ff 27       	eor	r31, r31
 8c4:	93 58       	subi	r25, 0x83	; 131
 8c6:	5f 4f       	sbci	r21, 0xFF	; 255
 8c8:	2a f0       	brmi	.+10     	; 0x8d4 <__divsf3_pse+0x6c>
 8ca:	9e 3f       	cpi	r25, 0xFE	; 254
 8cc:	51 05       	cpc	r21, r1
 8ce:	68 f0       	brcs	.+26     	; 0x8ea <__divsf3_pse+0x82>
 8d0:	92 c0       	rjmp	.+292    	; 0x9f6 <__fp_inf>
 8d2:	dc c0       	rjmp	.+440    	; 0xa8c <__fp_szero>
 8d4:	5f 3f       	cpi	r21, 0xFF	; 255
 8d6:	ec f3       	brlt	.-6      	; 0x8d2 <__divsf3_pse+0x6a>
 8d8:	98 3e       	cpi	r25, 0xE8	; 232
 8da:	dc f3       	brlt	.-10     	; 0x8d2 <__divsf3_pse+0x6a>
 8dc:	86 95       	lsr	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	b7 95       	ror	r27
 8e4:	f7 95       	ror	r31
 8e6:	9f 5f       	subi	r25, 0xFF	; 255
 8e8:	c9 f7       	brne	.-14     	; 0x8dc <__divsf3_pse+0x74>
 8ea:	88 0f       	add	r24, r24
 8ec:	91 1d       	adc	r25, r1
 8ee:	96 95       	lsr	r25
 8f0:	87 95       	ror	r24
 8f2:	97 f9       	bld	r25, 7
 8f4:	08 95       	ret
 8f6:	e1 e0       	ldi	r30, 0x01	; 1
 8f8:	66 0f       	add	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	bb 1f       	adc	r27, r27
 900:	62 17       	cp	r22, r18
 902:	73 07       	cpc	r23, r19
 904:	84 07       	cpc	r24, r20
 906:	ba 07       	cpc	r27, r26
 908:	20 f0       	brcs	.+8      	; 0x912 <__divsf3_pse+0xaa>
 90a:	62 1b       	sub	r22, r18
 90c:	73 0b       	sbc	r23, r19
 90e:	84 0b       	sbc	r24, r20
 910:	ba 0b       	sbc	r27, r26
 912:	ee 1f       	adc	r30, r30
 914:	88 f7       	brcc	.-30     	; 0x8f8 <__divsf3_pse+0x90>
 916:	e0 95       	com	r30
 918:	08 95       	ret

0000091a <__fixsfsi>:
 91a:	04 d0       	rcall	.+8      	; 0x924 <__fixunssfsi>
 91c:	68 94       	set
 91e:	b1 11       	cpse	r27, r1
 920:	b5 c0       	rjmp	.+362    	; 0xa8c <__fp_szero>
 922:	08 95       	ret

00000924 <__fixunssfsi>:
 924:	98 d0       	rcall	.+304    	; 0xa56 <__fp_splitA>
 926:	88 f0       	brcs	.+34     	; 0x94a <__fixunssfsi+0x26>
 928:	9f 57       	subi	r25, 0x7F	; 127
 92a:	90 f0       	brcs	.+36     	; 0x950 <__fixunssfsi+0x2c>
 92c:	b9 2f       	mov	r27, r25
 92e:	99 27       	eor	r25, r25
 930:	b7 51       	subi	r27, 0x17	; 23
 932:	a0 f0       	brcs	.+40     	; 0x95c <__fixunssfsi+0x38>
 934:	d1 f0       	breq	.+52     	; 0x96a <__fixunssfsi+0x46>
 936:	66 0f       	add	r22, r22
 938:	77 1f       	adc	r23, r23
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	1a f0       	brmi	.+6      	; 0x946 <__fixunssfsi+0x22>
 940:	ba 95       	dec	r27
 942:	c9 f7       	brne	.-14     	; 0x936 <__fixunssfsi+0x12>
 944:	12 c0       	rjmp	.+36     	; 0x96a <__fixunssfsi+0x46>
 946:	b1 30       	cpi	r27, 0x01	; 1
 948:	81 f0       	breq	.+32     	; 0x96a <__fixunssfsi+0x46>
 94a:	9f d0       	rcall	.+318    	; 0xa8a <__fp_zero>
 94c:	b1 e0       	ldi	r27, 0x01	; 1
 94e:	08 95       	ret
 950:	9c c0       	rjmp	.+312    	; 0xa8a <__fp_zero>
 952:	67 2f       	mov	r22, r23
 954:	78 2f       	mov	r23, r24
 956:	88 27       	eor	r24, r24
 958:	b8 5f       	subi	r27, 0xF8	; 248
 95a:	39 f0       	breq	.+14     	; 0x96a <__fixunssfsi+0x46>
 95c:	b9 3f       	cpi	r27, 0xF9	; 249
 95e:	cc f3       	brlt	.-14     	; 0x952 <__fixunssfsi+0x2e>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b3 95       	inc	r27
 968:	d9 f7       	brne	.-10     	; 0x960 <__fixunssfsi+0x3c>
 96a:	3e f4       	brtc	.+14     	; 0x97a <__fixunssfsi+0x56>
 96c:	90 95       	com	r25
 96e:	80 95       	com	r24
 970:	70 95       	com	r23
 972:	61 95       	neg	r22
 974:	7f 4f       	sbci	r23, 0xFF	; 255
 976:	8f 4f       	sbci	r24, 0xFF	; 255
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	08 95       	ret

0000097c <__floatunsisf>:
 97c:	e8 94       	clt
 97e:	09 c0       	rjmp	.+18     	; 0x992 <__floatsisf+0x12>

00000980 <__floatsisf>:
 980:	97 fb       	bst	r25, 7
 982:	3e f4       	brtc	.+14     	; 0x992 <__floatsisf+0x12>
 984:	90 95       	com	r25
 986:	80 95       	com	r24
 988:	70 95       	com	r23
 98a:	61 95       	neg	r22
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	99 23       	and	r25, r25
 994:	a9 f0       	breq	.+42     	; 0x9c0 <__floatsisf+0x40>
 996:	f9 2f       	mov	r31, r25
 998:	96 e9       	ldi	r25, 0x96	; 150
 99a:	bb 27       	eor	r27, r27
 99c:	93 95       	inc	r25
 99e:	f6 95       	lsr	r31
 9a0:	87 95       	ror	r24
 9a2:	77 95       	ror	r23
 9a4:	67 95       	ror	r22
 9a6:	b7 95       	ror	r27
 9a8:	f1 11       	cpse	r31, r1
 9aa:	f8 cf       	rjmp	.-16     	; 0x99c <__floatsisf+0x1c>
 9ac:	fa f4       	brpl	.+62     	; 0x9ec <__floatsisf+0x6c>
 9ae:	bb 0f       	add	r27, r27
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <__floatsisf+0x36>
 9b2:	60 ff       	sbrs	r22, 0
 9b4:	1b c0       	rjmp	.+54     	; 0x9ec <__floatsisf+0x6c>
 9b6:	6f 5f       	subi	r22, 0xFF	; 255
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	16 c0       	rjmp	.+44     	; 0x9ec <__floatsisf+0x6c>
 9c0:	88 23       	and	r24, r24
 9c2:	11 f0       	breq	.+4      	; 0x9c8 <__floatsisf+0x48>
 9c4:	96 e9       	ldi	r25, 0x96	; 150
 9c6:	11 c0       	rjmp	.+34     	; 0x9ea <__floatsisf+0x6a>
 9c8:	77 23       	and	r23, r23
 9ca:	21 f0       	breq	.+8      	; 0x9d4 <__floatsisf+0x54>
 9cc:	9e e8       	ldi	r25, 0x8E	; 142
 9ce:	87 2f       	mov	r24, r23
 9d0:	76 2f       	mov	r23, r22
 9d2:	05 c0       	rjmp	.+10     	; 0x9de <__floatsisf+0x5e>
 9d4:	66 23       	and	r22, r22
 9d6:	71 f0       	breq	.+28     	; 0x9f4 <__floatsisf+0x74>
 9d8:	96 e8       	ldi	r25, 0x86	; 134
 9da:	86 2f       	mov	r24, r22
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	60 e0       	ldi	r22, 0x00	; 0
 9e0:	2a f0       	brmi	.+10     	; 0x9ec <__floatsisf+0x6c>
 9e2:	9a 95       	dec	r25
 9e4:	66 0f       	add	r22, r22
 9e6:	77 1f       	adc	r23, r23
 9e8:	88 1f       	adc	r24, r24
 9ea:	da f7       	brpl	.-10     	; 0x9e2 <__floatsisf+0x62>
 9ec:	88 0f       	add	r24, r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	97 f9       	bld	r25, 7
 9f4:	08 95       	ret

000009f6 <__fp_inf>:
 9f6:	97 f9       	bld	r25, 7
 9f8:	9f 67       	ori	r25, 0x7F	; 127
 9fa:	80 e8       	ldi	r24, 0x80	; 128
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	08 95       	ret

00000a02 <__fp_nan>:
 a02:	9f ef       	ldi	r25, 0xFF	; 255
 a04:	80 ec       	ldi	r24, 0xC0	; 192
 a06:	08 95       	ret

00000a08 <__fp_pscA>:
 a08:	00 24       	eor	r0, r0
 a0a:	0a 94       	dec	r0
 a0c:	16 16       	cp	r1, r22
 a0e:	17 06       	cpc	r1, r23
 a10:	18 06       	cpc	r1, r24
 a12:	09 06       	cpc	r0, r25
 a14:	08 95       	ret

00000a16 <__fp_pscB>:
 a16:	00 24       	eor	r0, r0
 a18:	0a 94       	dec	r0
 a1a:	12 16       	cp	r1, r18
 a1c:	13 06       	cpc	r1, r19
 a1e:	14 06       	cpc	r1, r20
 a20:	05 06       	cpc	r0, r21
 a22:	08 95       	ret

00000a24 <__fp_round>:
 a24:	09 2e       	mov	r0, r25
 a26:	03 94       	inc	r0
 a28:	00 0c       	add	r0, r0
 a2a:	11 f4       	brne	.+4      	; 0xa30 <__fp_round+0xc>
 a2c:	88 23       	and	r24, r24
 a2e:	52 f0       	brmi	.+20     	; 0xa44 <__fp_round+0x20>
 a30:	bb 0f       	add	r27, r27
 a32:	40 f4       	brcc	.+16     	; 0xa44 <__fp_round+0x20>
 a34:	bf 2b       	or	r27, r31
 a36:	11 f4       	brne	.+4      	; 0xa3c <__fp_round+0x18>
 a38:	60 ff       	sbrs	r22, 0
 a3a:	04 c0       	rjmp	.+8      	; 0xa44 <__fp_round+0x20>
 a3c:	6f 5f       	subi	r22, 0xFF	; 255
 a3e:	7f 4f       	sbci	r23, 0xFF	; 255
 a40:	8f 4f       	sbci	r24, 0xFF	; 255
 a42:	9f 4f       	sbci	r25, 0xFF	; 255
 a44:	08 95       	ret

00000a46 <__fp_split3>:
 a46:	57 fd       	sbrc	r21, 7
 a48:	90 58       	subi	r25, 0x80	; 128
 a4a:	44 0f       	add	r20, r20
 a4c:	55 1f       	adc	r21, r21
 a4e:	59 f0       	breq	.+22     	; 0xa66 <__fp_splitA+0x10>
 a50:	5f 3f       	cpi	r21, 0xFF	; 255
 a52:	71 f0       	breq	.+28     	; 0xa70 <__fp_splitA+0x1a>
 a54:	47 95       	ror	r20

00000a56 <__fp_splitA>:
 a56:	88 0f       	add	r24, r24
 a58:	97 fb       	bst	r25, 7
 a5a:	99 1f       	adc	r25, r25
 a5c:	61 f0       	breq	.+24     	; 0xa76 <__fp_splitA+0x20>
 a5e:	9f 3f       	cpi	r25, 0xFF	; 255
 a60:	79 f0       	breq	.+30     	; 0xa80 <__fp_splitA+0x2a>
 a62:	87 95       	ror	r24
 a64:	08 95       	ret
 a66:	12 16       	cp	r1, r18
 a68:	13 06       	cpc	r1, r19
 a6a:	14 06       	cpc	r1, r20
 a6c:	55 1f       	adc	r21, r21
 a6e:	f2 cf       	rjmp	.-28     	; 0xa54 <__fp_split3+0xe>
 a70:	46 95       	lsr	r20
 a72:	f1 df       	rcall	.-30     	; 0xa56 <__fp_splitA>
 a74:	08 c0       	rjmp	.+16     	; 0xa86 <__fp_splitA+0x30>
 a76:	16 16       	cp	r1, r22
 a78:	17 06       	cpc	r1, r23
 a7a:	18 06       	cpc	r1, r24
 a7c:	99 1f       	adc	r25, r25
 a7e:	f1 cf       	rjmp	.-30     	; 0xa62 <__fp_splitA+0xc>
 a80:	86 95       	lsr	r24
 a82:	71 05       	cpc	r23, r1
 a84:	61 05       	cpc	r22, r1
 a86:	08 94       	sec
 a88:	08 95       	ret

00000a8a <__fp_zero>:
 a8a:	e8 94       	clt

00000a8c <__fp_szero>:
 a8c:	bb 27       	eor	r27, r27
 a8e:	66 27       	eor	r22, r22
 a90:	77 27       	eor	r23, r23
 a92:	cb 01       	movw	r24, r22
 a94:	97 f9       	bld	r25, 7
 a96:	08 95       	ret

00000a98 <__mulsf3>:
 a98:	0a d0       	rcall	.+20     	; 0xaae <__mulsf3x>
 a9a:	c4 cf       	rjmp	.-120    	; 0xa24 <__fp_round>
 a9c:	b5 df       	rcall	.-150    	; 0xa08 <__fp_pscA>
 a9e:	28 f0       	brcs	.+10     	; 0xaaa <__mulsf3+0x12>
 aa0:	ba df       	rcall	.-140    	; 0xa16 <__fp_pscB>
 aa2:	18 f0       	brcs	.+6      	; 0xaaa <__mulsf3+0x12>
 aa4:	95 23       	and	r25, r21
 aa6:	09 f0       	breq	.+2      	; 0xaaa <__mulsf3+0x12>
 aa8:	a6 cf       	rjmp	.-180    	; 0x9f6 <__fp_inf>
 aaa:	ab cf       	rjmp	.-170    	; 0xa02 <__fp_nan>
 aac:	ef cf       	rjmp	.-34     	; 0xa8c <__fp_szero>

00000aae <__mulsf3x>:
 aae:	cb df       	rcall	.-106    	; 0xa46 <__fp_split3>
 ab0:	a8 f3       	brcs	.-22     	; 0xa9c <__mulsf3+0x4>

00000ab2 <__mulsf3_pse>:
 ab2:	99 23       	and	r25, r25
 ab4:	d9 f3       	breq	.-10     	; 0xaac <__mulsf3+0x14>
 ab6:	55 23       	and	r21, r21
 ab8:	c9 f3       	breq	.-14     	; 0xaac <__mulsf3+0x14>
 aba:	95 0f       	add	r25, r21
 abc:	50 e0       	ldi	r21, 0x00	; 0
 abe:	55 1f       	adc	r21, r21
 ac0:	aa 27       	eor	r26, r26
 ac2:	ee 27       	eor	r30, r30
 ac4:	ff 27       	eor	r31, r31
 ac6:	bb 27       	eor	r27, r27
 ac8:	00 24       	eor	r0, r0
 aca:	08 94       	sec
 acc:	67 95       	ror	r22
 ace:	20 f4       	brcc	.+8      	; 0xad8 <__mulsf3_pse+0x26>
 ad0:	e2 0f       	add	r30, r18
 ad2:	f3 1f       	adc	r31, r19
 ad4:	b4 1f       	adc	r27, r20
 ad6:	0a 1e       	adc	r0, r26
 ad8:	22 0f       	add	r18, r18
 ada:	33 1f       	adc	r19, r19
 adc:	44 1f       	adc	r20, r20
 ade:	aa 1f       	adc	r26, r26
 ae0:	66 95       	lsr	r22
 ae2:	a9 f7       	brne	.-22     	; 0xace <__mulsf3_pse+0x1c>
 ae4:	77 95       	ror	r23
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <__mulsf3_pse+0x42>
 ae8:	f3 0f       	add	r31, r19
 aea:	b4 1f       	adc	r27, r20
 aec:	0a 1e       	adc	r0, r26
 aee:	12 1e       	adc	r1, r18
 af0:	08 f4       	brcc	.+2      	; 0xaf4 <__mulsf3_pse+0x42>
 af2:	63 95       	inc	r22
 af4:	33 0f       	add	r19, r19
 af6:	44 1f       	adc	r20, r20
 af8:	aa 1f       	adc	r26, r26
 afa:	22 1f       	adc	r18, r18
 afc:	76 95       	lsr	r23
 afe:	99 f7       	brne	.-26     	; 0xae6 <__mulsf3_pse+0x34>
 b00:	87 95       	ror	r24
 b02:	20 f4       	brcc	.+8      	; 0xb0c <__mulsf3_pse+0x5a>
 b04:	b4 0f       	add	r27, r20
 b06:	0a 1e       	adc	r0, r26
 b08:	12 1e       	adc	r1, r18
 b0a:	63 1f       	adc	r22, r19
 b0c:	44 0f       	add	r20, r20
 b0e:	aa 1f       	adc	r26, r26
 b10:	22 1f       	adc	r18, r18
 b12:	33 1f       	adc	r19, r19
 b14:	86 95       	lsr	r24
 b16:	a9 f7       	brne	.-22     	; 0xb02 <__mulsf3_pse+0x50>
 b18:	86 2f       	mov	r24, r22
 b1a:	71 2d       	mov	r23, r1
 b1c:	60 2d       	mov	r22, r0
 b1e:	11 24       	eor	r1, r1
 b20:	9f 57       	subi	r25, 0x7F	; 127
 b22:	50 40       	sbci	r21, 0x00	; 0
 b24:	8a f0       	brmi	.+34     	; 0xb48 <__mulsf3_pse+0x96>
 b26:	e1 f0       	breq	.+56     	; 0xb60 <__mulsf3_pse+0xae>
 b28:	88 23       	and	r24, r24
 b2a:	4a f0       	brmi	.+18     	; 0xb3e <__mulsf3_pse+0x8c>
 b2c:	ee 0f       	add	r30, r30
 b2e:	ff 1f       	adc	r31, r31
 b30:	bb 1f       	adc	r27, r27
 b32:	66 1f       	adc	r22, r22
 b34:	77 1f       	adc	r23, r23
 b36:	88 1f       	adc	r24, r24
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	a9 f7       	brne	.-22     	; 0xb28 <__mulsf3_pse+0x76>
 b3e:	9e 3f       	cpi	r25, 0xFE	; 254
 b40:	51 05       	cpc	r21, r1
 b42:	70 f0       	brcs	.+28     	; 0xb60 <__mulsf3_pse+0xae>
 b44:	58 cf       	rjmp	.-336    	; 0x9f6 <__fp_inf>
 b46:	a2 cf       	rjmp	.-188    	; 0xa8c <__fp_szero>
 b48:	5f 3f       	cpi	r21, 0xFF	; 255
 b4a:	ec f3       	brlt	.-6      	; 0xb46 <__mulsf3_pse+0x94>
 b4c:	98 3e       	cpi	r25, 0xE8	; 232
 b4e:	dc f3       	brlt	.-10     	; 0xb46 <__mulsf3_pse+0x94>
 b50:	86 95       	lsr	r24
 b52:	77 95       	ror	r23
 b54:	67 95       	ror	r22
 b56:	b7 95       	ror	r27
 b58:	f7 95       	ror	r31
 b5a:	e7 95       	ror	r30
 b5c:	9f 5f       	subi	r25, 0xFF	; 255
 b5e:	c1 f7       	brne	.-16     	; 0xb50 <__mulsf3_pse+0x9e>
 b60:	fe 2b       	or	r31, r30
 b62:	88 0f       	add	r24, r24
 b64:	91 1d       	adc	r25, r1
 b66:	96 95       	lsr	r25
 b68:	87 95       	ror	r24
 b6a:	97 f9       	bld	r25, 7
 b6c:	08 95       	ret

00000b6e <__mulhi3>:
 b6e:	00 24       	eor	r0, r0
 b70:	55 27       	eor	r21, r21
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <__mulhi3+0xe>
 b74:	08 0e       	add	r0, r24
 b76:	59 1f       	adc	r21, r25
 b78:	88 0f       	add	r24, r24
 b7a:	99 1f       	adc	r25, r25
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	29 f0       	breq	.+10     	; 0xb8a <__mulhi3+0x1c>
 b80:	76 95       	lsr	r23
 b82:	67 95       	ror	r22
 b84:	b8 f3       	brcs	.-18     	; 0xb74 <__mulhi3+0x6>
 b86:	71 05       	cpc	r23, r1
 b88:	b9 f7       	brne	.-18     	; 0xb78 <__mulhi3+0xa>
 b8a:	80 2d       	mov	r24, r0
 b8c:	95 2f       	mov	r25, r21
 b8e:	08 95       	ret

00000b90 <__divmodsi4>:
 b90:	05 2e       	mov	r0, r21
 b92:	97 fb       	bst	r25, 7
 b94:	16 f4       	brtc	.+4      	; 0xb9a <__divmodsi4+0xa>
 b96:	00 94       	com	r0
 b98:	0f d0       	rcall	.+30     	; 0xbb8 <__negsi2>
 b9a:	57 fd       	sbrc	r21, 7
 b9c:	05 d0       	rcall	.+10     	; 0xba8 <__divmodsi4_neg2>
 b9e:	14 d0       	rcall	.+40     	; 0xbc8 <__udivmodsi4>
 ba0:	07 fc       	sbrc	r0, 7
 ba2:	02 d0       	rcall	.+4      	; 0xba8 <__divmodsi4_neg2>
 ba4:	46 f4       	brtc	.+16     	; 0xbb6 <__divmodsi4_exit>
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <__negsi2>

00000ba8 <__divmodsi4_neg2>:
 ba8:	50 95       	com	r21
 baa:	40 95       	com	r20
 bac:	30 95       	com	r19
 bae:	21 95       	neg	r18
 bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 bb2:	4f 4f       	sbci	r20, 0xFF	; 255
 bb4:	5f 4f       	sbci	r21, 0xFF	; 255

00000bb6 <__divmodsi4_exit>:
 bb6:	08 95       	ret

00000bb8 <__negsi2>:
 bb8:	90 95       	com	r25
 bba:	80 95       	com	r24
 bbc:	70 95       	com	r23
 bbe:	61 95       	neg	r22
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	08 95       	ret

00000bc8 <__udivmodsi4>:
 bc8:	a1 e2       	ldi	r26, 0x21	; 33
 bca:	1a 2e       	mov	r1, r26
 bcc:	aa 1b       	sub	r26, r26
 bce:	bb 1b       	sub	r27, r27
 bd0:	fd 01       	movw	r30, r26
 bd2:	0d c0       	rjmp	.+26     	; 0xbee <__udivmodsi4_ep>

00000bd4 <__udivmodsi4_loop>:
 bd4:	aa 1f       	adc	r26, r26
 bd6:	bb 1f       	adc	r27, r27
 bd8:	ee 1f       	adc	r30, r30
 bda:	ff 1f       	adc	r31, r31
 bdc:	a2 17       	cp	r26, r18
 bde:	b3 07       	cpc	r27, r19
 be0:	e4 07       	cpc	r30, r20
 be2:	f5 07       	cpc	r31, r21
 be4:	20 f0       	brcs	.+8      	; 0xbee <__udivmodsi4_ep>
 be6:	a2 1b       	sub	r26, r18
 be8:	b3 0b       	sbc	r27, r19
 bea:	e4 0b       	sbc	r30, r20
 bec:	f5 0b       	sbc	r31, r21

00000bee <__udivmodsi4_ep>:
 bee:	66 1f       	adc	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	1a 94       	dec	r1
 bf8:	69 f7       	brne	.-38     	; 0xbd4 <__udivmodsi4_loop>
 bfa:	60 95       	com	r22
 bfc:	70 95       	com	r23
 bfe:	80 95       	com	r24
 c00:	90 95       	com	r25
 c02:	9b 01       	movw	r18, r22
 c04:	ac 01       	movw	r20, r24
 c06:	bd 01       	movw	r22, r26
 c08:	cf 01       	movw	r24, r30
 c0a:	08 95       	ret

00000c0c <_exit>:
 c0c:	f8 94       	cli

00000c0e <__stop_program>:
 c0e:	ff cf       	rjmp	.-2      	; 0xc0e <__stop_program>
